input {
  udp {
    host => "LOGSTASH_HOST_IP"
    port => 1514
    type => "cisco-fw"
    tags => "cisco-fw"
    charset => "UTF-8"
  }
}

filter {
    if [type] == "syslog" {
      grok {
        patterns_dir => "/opt/logstash/patterns/"
        match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
      }
      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
      if !("_grokparsefailure" in [tags]) {
        mutate {
          replace => [ "@source_host", "%{syslog_hostname}" ]
          replace => [ "@message", "%{syslog_message}" ]
        }
      }
      mutate {
        remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
      }
    }
    if [type] == "cisco-fw" {
      syslog_pri {
        tags => "cisco-fw"
      }
      mutate {
        tags => "cisco-fw"
        exclude_tags => "_grokparsefailure"
        replace => [ "@source_host", "%{logsource}" ]
        replace => [ "@message", "%{syslog_message}" ]
      }
      grok {
        tags => "cisco-fw"
        break_on_match => false
        patterns_dir => "/opt/logstash/patterns"
        pattern => [
        "%{CISCOFW1}",
        "%{CISCOFW2}",
        "%{CISCOFW3}",
        "%{CISCOFW4}",
        "%{CISCOFW4b}",
        "%{CISCOFW5}",
        "%{CISCOFW6a}",
        "%{CISCOFW6b}",
        "%{CISCOFW7}",
        "%{CISCOFW8}",
        "%{CISCOFW9}",
        "%{CISCOFW10}",
        "%{CISCOFW11}",
        "%{CISCOFW12}",
        "%{CISCOFW13}",
        "%{CISCOFW14}",
        "%{CISCOFW15}",
        "%{CISCOFW16}",
        "%{CISCOFW17}",
        "%{CISCOFW18}"
        ]
      }
       # Parse the date
        date {
          match => ["timestamp",
            "MMM dd HH:mm:ss.SSS",
            "MMM d HH:mm:ss.SSS",
            "MMM dd HH:mm:ss",
            "MMM d HH:mm:ss",
            "MMM dd yyyy HH:mm:ss.SSS",
            "MMM d yyyy HH:mm:ss.SSS",
            "MMM dd yyyy HH:mm:ss",
            "MMM d yyyy HH:mm:ss",
            "yyyy-MM-dd HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
          ]
        }
        # Loookup the src_ip
        if [src_ip]  {
          geoip {
            source => "src_ip"
            type    => "cisco-fw"
            tags    => "cisco-fw"
            database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
            add_field => [ "src_country",  "%{[geoip][country_code2]}" ]
            add_field => [ "src_region",   "%{[geoip][region_name]}" ]
          }
        }
        if [dst_ip]  {
          geoip {
            source => "dst_ip"
            type    => "cisco-fw"
            tags    => "cisco-fw"
            database => "/opt/GeoIP/GeoLiteCity.dat"
            add_field => [ "dst_country",  "%{[geoip][country_code2]}" ]
            add_field => [ "dst_region",   "%{[geoip][region_name]}" ]
          }
        }
        if [external]  {
          geoip {
            source => "external"
            type    => "cisco-fw"
            tags    => "cisco-fw"
            database => "/opt/GeoIP/GeoLiteCity.dat"
            add_field => [ "country",  "%{[geoip][country_code2]}" ]
            add_field => [ "region",   "%{[geoip][region_name]}" ]
          }
        }
        if [dst]  {
          geoip {
            source => "dst"
            type    => "cisco-fw"
            tags    => "cisco-fw"
            database => "/opt/GeoIP/GeoLiteCity.dat"
            add_field => [ "country",  "%{[geoip][country_code2]}" ]
            add_field => [ "region",   "%{[geoip][region_name]}" ]
          }
        }
      date {
        match => ["timestamp",
          "MMM dd HH:mm:ss.SSS",
          "MMM d HH:mm:ss.SSS",
          "MMM dd HH:mm:ss",
          "MMM d HH:mm:ss",
          "MMM dd yyyy HH:mm:ss.SSS",
          "MMM d yyyy HH:mm:ss.SSS",
          "MMM dd yyyy HH:mm:ss",
          "MMM d yyyy HH:mm:ss",
          "yyyy-MM-dd HH:mm:ss.SSS",
          "yyyy-MM-dd HH:mm:ss"
        ]
       }
    }
}
# OUTPUT
output {
    if [type] == "syslog" {
        elasticsearch {
            host => "ES_HOST_IP"
            cluster => "elasticsearch"
        }
        stdout {
            codec => rubydebug
        }
    }
    if [type] == "cisco-fw" {
        elasticsearch {
            host => "ES_HOST_IP"
            cluster => "elasticsearch"
        }
        stdout {
            codec => rubydebug
        }
    }
}
